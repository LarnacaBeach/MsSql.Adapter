#region nullable hack...
private BitArray? _InternalNullFields;
private static int _MaxOrder={{ maxOrder }};

[DataMember(Order = 10000)]
public byte[]? InternalNullFields {
    get { return GetBytes(_InternalNullFields); }
    set { if (value != null) { _InternalNullFields = new BitArray(value); } else { _InternalNullFields = null; }; }
}

private byte[]? GetBytes(BitArray? bits)
{
    if (bits == null) return null;
    byte[] ret = new byte[(bits.Length - 1) / 8 + 1];
    bits.CopyTo(ret, 0);
    return ret;
}

private void _SetNullable(bool isNullValue, int order)
{
    if (_InternalNullFields == null && !isNullValue) return;
    if (order > _MaxOrder) throw new Exception($"_SetNullable for order {order} is greater than MaxOrder: {_MaxOrder}");
    if (_InternalNullFields == null) _InternalNullFields = new BitArray(_MaxOrder);
    _InternalNullFields.Set(order-1, isNullValue);
}

private T? _GetNullableValue<T>(T? value, int order) where T: struct
{
    if (order > _MaxOrder) throw new Exception($"_GetNullableValue for order {order} is greater than MaxOrder: {_MaxOrder}");
    if (_InternalNullFields == null) return value.GetValueOrDefault();
    if (_InternalNullFields.Get(order-1)) return null;
    return value.GetValueOrDefault();
}

private T[]? _GetNullableValue<T>(T[]? value, int order) where T: struct
{
    if (order > _MaxOrder) throw new Exception($"_GetNullableValue for order {order} is greater than MaxOrder: {_MaxOrder}");
    if (_InternalNullFields == null) return value ?? Array.Empty<T>();
    if (_InternalNullFields.Get(order-1)) return null;
    return value ?? Array.Empty<T>();
}

private string? _GetNullableValue(string? value, int order)
{
    if (order > _MaxOrder) throw new Exception($"_GetNullableValue for order {order} is greater than MaxOrder: {_MaxOrder}");
    if (_InternalNullFields == null) return value ?? string.Empty;
    if (_InternalNullFields.Get(order-1)) return null;
    return value ?? string.Empty;
}
#endregion